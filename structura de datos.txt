heapsort

import java.util.Arrays;

public class HeapSort {

    public static int heapSize;

    public static int LEFT(int i)
    {
        //returns left index of a zero index based array
        return 2*i+1;
    }

    public static int RIGHT(int i)
    {
       
        return 2*i+2;
    }


    public static void BUILD_MAX_HEAP(int A[])
    {
        heapSize = A.length;
        for(int i=A.length/2; i>=0;i--)
        {
            
            MAX_HEAPIFY(A, i);
        }
    }


    public static void MAX_HEAPIFY(int A[],int i)
    {
        int l=LEFT(i);
        int r=RIGHT(i);
        int largestElementIndex = -1;
       
        if(l<heapSize && A[l]>A[i]){
            largestElementIndex = l;
        }
        else
        {
            largestElementIndex=i;
        }
       
        if(r<heapSize && A[r]>A[largestElementIndex])
        {
            largestElementIndex = r;
        }
    

        if(largestElementIndex!=i)
        {
            int temp = A[i];
            A[i]=A[largestElementIndex];
            A[largestElementIndex]=temp;
          
            MAX_HEAPIFY(A, largestElementIndex);
        }
    }

    public static void HEAP_SORT(int A[])
    {
       
        BUILD_MAX_HEAP(A);
       
        for(int i=A.length-1;i>=0;i--)
        {
            
            int temp = A[0];
            A[0]=A[i];
            A[i]=temp;
           
            heapSize  = heapSize-1;
           
            MAX_HEAPIFY(A,0);
        }
    }

    public static void main(String[] args) {


        int A[] = new int[]{4,1,3,2,16,9,10,14,8,7};
        HEAP_SORT(A);
        System.out.println(Arrays.toString(A));
    }
}

---------------------------------------------------------------------------------------------------------
mergesort

public class MergeSort {
	

    public static void main(String args[]){
       int arrayEntrada[]={321, 123, 213, 234, 1, 4, 5, 6}; //Este es el array de elementos que vamos a ordenar

       mergeSort(arrayEntrada); //llamada al metodo mergeSort 
       for (int i=0;i < arrayEntrada.length;i++){ //Este bucle imprime el contenido del array
          System.out.print(arrayEntrada[i]+" ");
       }//fin del for
     }//fin del main
     
    public static void mergeSort( int a[ ]){
        int tmpArray[] = new int[ a.length ];

        mergeSort( a, tmpArray, 0, a.length - 1 );
    }
    private static void mergeSort( int a[ ], int tmpArray[],int left, int right ){
        if( left < right )
        {
            int center = ( left + right ) / 2;
            mergeSort( a, tmpArray, left, center );
            mergeSort( a, tmpArray, center + 1, right );
            merge( a, tmpArray, left, center + 1, right );
        }
    }

    private static void merge( int a[ ],int tmpArray[],int leftPos, int rightPos, int rightEnd){
        int leftEnd = rightPos - 1;
        int tmpPos = leftPos;
        int numElements = rightEnd - leftPos + 1;

        // Main loop
        while( leftPos <= leftEnd && rightPos <= rightEnd ){
            if( a[ leftPos ]<( a[ rightPos ] ) ){
                tmpArray[ tmpPos++ ] = a[ leftPos++ ];
            }
            else{
                tmpArray[ tmpPos++ ] = a[ rightPos++ ];
            }
        }
        while( leftPos <= leftEnd ){    // Copy rest of first half
            tmpArray[ tmpPos++ ] = a[ leftPos++ ];
        }
        while( rightPos <= rightEnd ){  // Copy rest of right half
            tmpArray[ tmpPos++ ] = a[ rightPos++ ];
        }
        // Copy TmpArray back
        for( int i = 0; i < numElements; i++, rightEnd-- ){
            a[ rightEnd ] = tmpArray[ rightEnd ];
        }
    }
}//class MergeSort